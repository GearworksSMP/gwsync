// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: gearworks.proto

package gwsync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sync_SavePlayerState_FullMethodName = "/gearworks.Sync/SavePlayerState"
	Sync_LoadPlayerState_FullMethodName = "/gearworks.Sync/LoadPlayerState"
	Sync_HandleChat_FullMethodName      = "/gearworks.Sync/HandleChat"
)

// SyncClient is the client API for Sync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The sync service definition.
type SyncClient interface {
	// Saves the player state with achievements and inventory
	SavePlayerState(ctx context.Context, in *SaveStateRequest, opts ...grpc.CallOption) (*SaveStateReply, error)
	// Loads the player state with achievements and inventory
	LoadPlayerState(ctx context.Context, in *LoadStateRequest, opts ...grpc.CallOption) (*LoadStateReply, error)
	// Handle chat messages
	HandleChat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error)
}

type syncClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncClient(cc grpc.ClientConnInterface) SyncClient {
	return &syncClient{cc}
}

func (c *syncClient) SavePlayerState(ctx context.Context, in *SaveStateRequest, opts ...grpc.CallOption) (*SaveStateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveStateReply)
	err := c.cc.Invoke(ctx, Sync_SavePlayerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncClient) LoadPlayerState(ctx context.Context, in *LoadStateRequest, opts ...grpc.CallOption) (*LoadStateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadStateReply)
	err := c.cc.Invoke(ctx, Sync_LoadPlayerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncClient) HandleChat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Sync_ServiceDesc.Streams[0], Sync_HandleChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sync_HandleChatClient = grpc.BidiStreamingClient[ChatMessage, ChatMessage]

// SyncServer is the server API for Sync service.
// All implementations must embed UnimplementedSyncServer
// for forward compatibility.
//
// The sync service definition.
type SyncServer interface {
	// Saves the player state with achievements and inventory
	SavePlayerState(context.Context, *SaveStateRequest) (*SaveStateReply, error)
	// Loads the player state with achievements and inventory
	LoadPlayerState(context.Context, *LoadStateRequest) (*LoadStateReply, error)
	// Handle chat messages
	HandleChat(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error
	mustEmbedUnimplementedSyncServer()
}

// UnimplementedSyncServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSyncServer struct{}

func (UnimplementedSyncServer) SavePlayerState(context.Context, *SaveStateRequest) (*SaveStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePlayerState not implemented")
}
func (UnimplementedSyncServer) LoadPlayerState(context.Context, *LoadStateRequest) (*LoadStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPlayerState not implemented")
}
func (UnimplementedSyncServer) HandleChat(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method HandleChat not implemented")
}
func (UnimplementedSyncServer) mustEmbedUnimplementedSyncServer() {}
func (UnimplementedSyncServer) testEmbeddedByValue()              {}

// UnsafeSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServer will
// result in compilation errors.
type UnsafeSyncServer interface {
	mustEmbedUnimplementedSyncServer()
}

func RegisterSyncServer(s grpc.ServiceRegistrar, srv SyncServer) {
	// If the following call pancis, it indicates UnimplementedSyncServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sync_ServiceDesc, srv)
}

func _Sync_SavePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServer).SavePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sync_SavePlayerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServer).SavePlayerState(ctx, req.(*SaveStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sync_LoadPlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServer).LoadPlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sync_LoadPlayerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServer).LoadPlayerState(ctx, req.(*LoadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sync_HandleChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncServer).HandleChat(&grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sync_HandleChatServer = grpc.BidiStreamingServer[ChatMessage, ChatMessage]

// Sync_ServiceDesc is the grpc.ServiceDesc for Sync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gearworks.Sync",
	HandlerType: (*SyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SavePlayerState",
			Handler:    _Sync_SavePlayerState_Handler,
		},
		{
			MethodName: "LoadPlayerState",
			Handler:    _Sync_LoadPlayerState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleChat",
			Handler:       _Sync_HandleChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gearworks.proto",
}
